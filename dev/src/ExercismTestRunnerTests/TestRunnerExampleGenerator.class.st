"
I'm responsible for Example* runner test classes file generation (into *.st) format. My output is generated directories with example solutions and test cases.
"
Class {
	#name : #TestRunnerExampleGenerator,
	#superclass : #Object,
	#category : #ExercismTestRunnerTests
}

{ #category : #private }
TestRunnerExampleGenerator class >> definedExampleClasses [

	^ ExercismTest allSubclasses
		select: [ :aClass | (aClass class includesSelector: #exercise) and: [aClass name beginsWith: 'Example']] 
]

{ #category : #private }
TestRunnerExampleGenerator class >> generateExampleJsonResultsIn: aDirReference [

	|testRunner|
	testRunner := ExercismTestRunner default.
	aDirReference entries do: [:entry |
		|aDir jsonFile| 
		aDir := entry reference.
		[testRunner runTestsOnExercise: aDir basename importSourceFrom: aDir result: aDir] on: ExDomainError do: [:ex | "do nothing on business error" self traceCr: ex messageText ].
		jsonFile := (aDir / 'results.json') asFileReference.
		jsonFile renameTo: 'expected_', jsonFile basename
	]
	
]

{ #category : #private }
TestRunnerExampleGenerator class >> generateExamplesToDirectory: aDirReference [

	self definedExampleClasses do:  [:exampleClass |
		| exampleDir |
		exampleDir := (aDirReference / exampleClass exampleDirName) ensureCreateDirectory.
		self writeFile: exampleDir / exampleClass exTonelSourceFilename  with: exampleClass exampleSolutionSourceCode.
		"write test file only if not empty"
		exampleClass exampleTestCasesSourceCode ifNotEmpty: [:aSource | 
			self writeFile: exampleDir / exampleClass exTonelTestFilename  with: aSource
		]
	].
	
	self generateExampleJsonResultsIn: aDirReference.
	self writeNoteIn: aDirReference.
	
]

{ #category : #private }
TestRunnerExampleGenerator class >> writeFile: aFileReference with: aContent [

	aFileReference 
		ensureDelete; 
		writeStreamDo: [ :stream |
		 	stream nextPutAll: (aContent withLineEndings: OSPlatform current lineEnding)
	 ]
]

{ #category : #private }
TestRunnerExampleGenerator class >> writeNoteIn: aDirReference [

	self writeFile: aDirReference / 'notes.txt' with: ('Generated by: "{1}".' format: { thisContext sender  })
	
]
