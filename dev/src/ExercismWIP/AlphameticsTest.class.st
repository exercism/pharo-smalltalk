"
# Alphametics

Write a function to solve alphametics puzzles.

[Alphametics](https://en.wikipedia.org/wiki/Alphametics) is a puzzle where
letters in words are replaced with numbers.

For example `SEND + MORE = MONEY`:

```text
  S E N D
  M O R E +
-----------
M O N E Y
```

Replacing these with valid numbers gives:

```text
  9 5 6 7
  1 0 8 5 +
-----------
1 0 6 5 2
```

This is correct because every letter is replaced by a different number and the
words, translated into numbers, then make a valid sum.

Each letter must represent a different digit, and the leading digit of
a multi-digit number must not be zero.

Write a function to solve alphametics puzzles.

## Hint

TBD

"
Class {
	#name : 'AlphameticsTest',
	#superclass : 'ExercismTest',
	#instVars : [
		'alphameticsCalculator'
	],
	#category : 'ExercismWIP-Alphametics',
	#package : 'ExercismWIP',
	#tag : 'Alphametics'
}

{ #category : 'config' }
AlphameticsTest class >> uuid [
	"Answer a unique id for this exercise"
	^'2aa5bf2e-b043-0d00-926f-453302a76407'
]

{ #category : 'config' }
AlphameticsTest class >> version [
	"Generated from specification: 25 April 2019"
	^'1.3.0'
]

{ #category : 'running' }
AlphameticsTest >> setUp [
	super setUp.
	alphameticsCalculator := Alphametics new
]

{ #category : 'tests' }
AlphameticsTest >> test01_PuzzleWithThreeLetters [
	| result |

	result := alphameticsCalculator solvePuzzle: 'I + BB == ILL' .
	self assert: result equals: ((Dictionary new) add: ('L'->0); add: ('I'->1); add: ('B'->9); yourself)
]

{ #category : 'tests' }
AlphameticsTest >> test02_SolutionMustHaveUniqueValueForEachLetter [
	| result |

	result := alphameticsCalculator solvePuzzle: 'A == B' .
	self assert: result equals: nil
]

{ #category : 'tests' }
AlphameticsTest >> test03_LeadingZeroSolutionIsInvalid [
	| result |

	result := alphameticsCalculator solvePuzzle: 'ACA + DD == BD' .
	self assert: result equals: nil
]

{ #category : 'tests' }
AlphameticsTest >> test04_PuzzleWithTwoDigitsFinalCarry [
	| result |

	result := alphameticsCalculator solvePuzzle: 'A + A + A + A + A + A + A + A + A + A + A + B == BCC' .
	self assert: result equals: ((Dictionary new) add: ('C'->0); add: ('A'->9); add: ('B'->1); yourself)
]

{ #category : 'tests' }
AlphameticsTest >> test05_PuzzleWithFourLetters [
	| result |

	result := alphameticsCalculator solvePuzzle: 'AS + A == MOM' .
	self assert: result equals: ((Dictionary new) add: ('O'->0); add: ('S'->2); add: ('A'->9); add: ('M'->1); yourself)
]

{ #category : 'tests' }
AlphameticsTest >> test06_PuzzleWithSixLetters [
	| result |

	result := alphameticsCalculator solvePuzzle: 'NO + NO + TOO == LATE' .
	self assert: result equals: ((Dictionary new) add: ('A'->0); add: ('O'->4); add: ('T'->9); add: ('N'->7); add: ('L'->1); add: ('E'->2); yourself)
]

{ #category : 'tests' }
AlphameticsTest >> test07_PuzzleWithSevenLetters [
	| result |

	result := alphameticsCalculator solvePuzzle: 'HE + SEES + THE == LIGHT' .
	self assert: result equals: ((Dictionary new) add: ('G'->2); add: ('S'->9); add: ('H'->5); add: ('T'->7); add: ('I'->0); add: ('L'->1); add: ('E'->4); yourself)
]

{ #category : 'tests' }
AlphameticsTest >> test08_PuzzleWithEightLetters [
	| result |

	result := alphameticsCalculator solvePuzzle: 'SEND + MORE == MONEY' .
	self assert: result equals: ((Dictionary new) add: ('S'->9); add: ('O'->0); add: ('M'->1); add: ('D'->7); add: ('R'->8); add: ('N'->6); add: ('Y'->2); add: ('E'->5); yourself)
]

{ #category : 'tests' }
AlphameticsTest >> test09_PuzzleWithTenLetters [
	| result |

	result := alphameticsCalculator solvePuzzle: 'AND + A + STRONG + OFFENSE + AS + A + GOOD == DEFENSE' .
	self assert: result equals: ((Dictionary new) add: ('D'->3); add: ('F'->7); add: ('R'->1); add: ('O'->2); add: ('T'->9); add: ('E'->4); add: ('N'->0); add: ('G'->8); add: ('S'->6); add: ('A'->5); yourself)
]

{ #category : 'tests' }
AlphameticsTest >> test10_PuzzleWithTenLettersAnd199Addends [
	| result |

	result := alphameticsCalculator solvePuzzle
	self assert: result equals: ((Dictionary new) add: ('I'->7); add: ('F'->5); add: ('R'->3); add: ('O'->6); add: ('L'->2); add: ('H'->8); add: ('T'->9); add: ('E'->0); add: ('S'->4); add: ('A'->1); yourself)
]
